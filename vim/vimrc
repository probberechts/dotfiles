if has('vim_starting') | set encoding=utf-8 nobomb | endif
scriptencoding utf-8

"
"   ██╗   ██╗ ██╗ ███╗   ███╗ ██████╗   ██████╗
"   ██║   ██║ ██║ ████╗ ████║ ██╔══██╗ ██╔════╝
"   ██║   ██║ ██║ ██╔████╔██║ ██████╔╝ ██║
"   ╚██╗ ██╔╝ ██║ ██║╚██╔╝██║ ██╔══██╗ ██║
" ██╗╚████╔╝  ██║ ██║ ╚═╝ ██║ ██║  ██║ ╚██████╗
" ╚═╝ ╚═══╝   ╚═╝ ╚═╝     ╚═╝ ╚═╝  ╚═╝  ╚═════╝
"

" ============================================================================
" Settings vars
" ============================================================================

" Just for debugging
let g:dko_rtp_original = &runtimepath

" Used by anything that needs to change/use loc list
let g:dko_loc_list_height = 10

" ============================================================================
" My autocmd block - Clear vimrc group's autocmds if reloading
" ============================================================================

augroup vimrc
  autocmd!
augroup END

" ============================================================================
" My defaults
" May be overridden by **/plugins, after/plugins and **/ftplugins
" ============================================================================

set modeline

" ----------------------------------------------------------------------------
" Clipboard -- use os clipboard
" ----------------------------------------------------------------------------

set pastetoggle=<F12>

if has('clipboard')
  set clipboard=unnamed                 " Use vim global clipboard register
  if has('unnamedplus') || has('nvim')  " Use system clipboard register
    set clipboard+=unnamedplus
  endif
endif


" ----------------------------------------------------------------------------
" Display
" ----------------------------------------------------------------------------

set title                             " wintitle = filename - vim

" this is already set by modern terminal
"set ttyfast

if !has('nvim')
  set lazyredraw                      " macros don't update display
endif

" no beeps or flashes
set visualbell t_vb=

set number
set numberwidth=5

" show context around current cursor position
set scrolloff=8
set sidescrolloff=16

set textwidth=78
" the line will be right after column 80, &tw+3
set colorcolumn=+3
" set cursorline

set synmaxcol=512                     " don't syntax highlight long lines

" ------------------------------------
" Tab line
" ------------------------------------

set showtabline=0                     " start OFF, toggle =2 to show tabline

" ------------------------------------
" Status line
" ------------------------------------

set laststatus=2                      " always show all statuslines

" ------------------------------------
" Command line
" ------------------------------------

set noshowcmd                         " show incomplete commands (SLOW so off)
set noshowmode                        " don't show -- INSERT -- in cmdline

" ----------------------------------------------------------------------------
" Input
" ----------------------------------------------------------------------------

" ------------------------------------
" Mouse
" ------------------------------------

set mouse=a
if !has('nvim') | set ttymouse=xterm | endif

" ------------------------------------
" Typing key combos
" ------------------------------------

set notimeout
set ttimeout
if !has('nvim')
  set ttimeoutlen=10
endif

" no longer using comma so I can reverse repeat fFtT searches
" no longer using \ so I can type escaped chars :/
" needs to be before bundle so plugins map correctly
let g:mapleader = "\<Space>"

" ----------------------------------------------------------------------------
" Wild and file globbing stuff in command mode
" ----------------------------------------------------------------------------

set browsedir=buffer                  " browse files in same dir as open file
set wildmenu                          " Enhanced command line completion.
set wildmode=list:longest,full        " Complete files using a menu AND list
set wildignorecase

" wildignore prevents things from showing up in cmd completion
" It's for things you'd NEVER open in Vim, like caches and binary files
set wildignore+=.git
set wildignore+=.hg,.svn
set wildignore+=tags
set wildignore+=*.manifest
set wildignore+=.sass-cache
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*.gem
set wildignore+=*.*~,*~
set wildignore+=tags.lock
set wildignore+=*.aux,*.out,*.toc
set wildignore+=*.o,*.obj,*.exe,*.dll,*.jar,*.pyc,*.rbc,*.class
set wildignore+=*.ai,*.bmp,*.gif,*.ico,*.jpg,*.jpeg,*.png,*.psd,*.webp
set wildignore+=*.avi,*.m4a,*.mp3,*.oga,*.ogg,*.wav,*.webm
set wildignore+=*.eot,*.otf,*.ttf,*.woff
set wildignore+=*.doc,*.pdf
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
set wildignore+=*.swp,.lock,.DS_Store,._*

" ----------------------------------------------------------------------------
" File saving
" ----------------------------------------------------------------------------

"set autoread                         " reload files if they were edited
                                      " elsewhere
set fileformats=unix,mac,dos
set fileformat=unix

" info file -- nvim uses shada in $XDG_DATA_HOME so that's cool.
if !has('nvim')
  execute 'set viminfo+=n' . expand(g:dko#vim_dir . '/.tmp/cache/.viminfo')

  " From https://github.com/swizzard/dotfiles/blob/master/.vimrc
  " Don't keep .viminfo information for files in temporary directories or shared
  " memory filesystems; this is because they're used as scratch spaces for tools
  " like sudoedit(8) and pass(1) and hence could present a security problem
  if has('viminfo')
    augroup dkoviminfo
      autocmd!
      silent! autocmd vimrc BufNewFile,BufReadPre
          \ /tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*,*/shm/*
          \ setlocal viminfo=
    augroup END
  endif
endif

" swap - useless
set noswapfile
if !has('nvim')
  execute 'set directory=' . g:dko#vim_dir . '/.tmp/swap//'
endif

" backups
set nobackup
set backupskip=/tmp/*
" Make Vim able to edit crontab files again.
set backupskip+=,/private/tmp/*"
if has('mac')
  augroup dkomac
    autocmd!
    autocmd BufEnter  /private/tmp/crontab.*
          \ setlocal backup
          \ setlocal backupcopy=yes
  augroup END
endif
if !has('nvim')
  execute 'set backupdir=' . g:dko#vim_dir . '/.tmp/backup//'
endif

" undo files
" double slash means create dir structure to mirror file's path
set undofile
set undolevels=1000
set undoreload=10000
if !has('nvim')
  execute 'set undodir=' . g:dko#vim_dir . '/.tmp/undo//'
endif

" ----------------------------------------------------------------------------
" Spellcheck
" ----------------------------------------------------------------------------

" Add symlinked aspell from dotfiles as default spellfile
"execute 'set spellfile=' . glob(expand(dko#vim_dir . '/en.utf-8.add'))

" ----------------------------------------------------------------------------
" Completion -- see also plugins/completion.vim
" ----------------------------------------------------------------------------

" Don't consider = symbol as part filename. Helps for deoplete file source, too.
set isfname-==

set complete-=i                       " don't complete includes
set complete-=t                       " don't complete tags
set completeopt-=preview              " don't open scratch preview
set completeopt+=menu,menuone         " show PUM, even for one thing

" @see <https://github.com/Valloric/YouCompleteMe/blob/master/autoload/youcompleteme.vim#L343>
if has('patch-7.4.314')
  set shortmess+=c                    " Disable "Pattern not found" messages
endif

" ----------------------------------------------------------------------------
" Window splitting and buffers
" ----------------------------------------------------------------------------

set splitbelow
set splitright
set fillchars=vert:│                  " Vertical sep between windows (unicode)

set hidden                            " remember undo after quitting

" reveal already opened files from the quickfix window instead of opening new
" buffers
set switchbuf=useopen

set nostartofline                     " don't jump to col1 on switch buffer

" ----------------------------------------------------------------------------
" Code folding
" ----------------------------------------------------------------------------

set nofoldenable
set foldcolumn=2
set foldlevel=99                      " show all folds by default
set foldlevelstart=99                 " show all folds by default
if has('windows')
  set fillchars=vert:┃              " BOX DRAWINGS HEAVY VERTICAL (U+2503, UTF-8: E2 94 83)
  set fillchars+=fold:·             " MIDDLE DOT (U+00B7, UTF-8: C2 B7)
endif
set foldtext=dko#foldtext()

" ----------------------------------------------------------------------------
" Trailing whitespace
" ----------------------------------------------------------------------------

set list
set listchars=
set listchars+=tab:→\ 
set listchars+=trail:·
set listchars+=extends:»              " show cut off when nowrap
set listchars+=precedes:«
set listchars+=nbsp:⣿

" maybe...
" if has('patch-7.4.785')
"   set fixendofline
" endif

" ----------------------------------------------------------------------------
" Diffing
" ----------------------------------------------------------------------------

" Note this is += since fillchars was defined in the window config
" set fillchars+=diff:⣿
set diffopt=vertical                  " Use in vertical diff mode
set diffopt+=filler                   " blank lines to keep sides aligned
set diffopt+=iwhite                   " Ignore whitespace changes

" ----------------------------------------------------------------------------
" Input auto-formatting (global defaults)
" Probably need to update these in after/ftplugin too since ftplugins will
" probably update it.
" ----------------------------------------------------------------------------

set formatoptions=
set formatoptions+=c                  " Auto-wrap comments using textwidth
set formatoptions+=r                  " Continue comments by default
set formatoptions-=o                  " do not continue comment using o or O
set formatoptions+=q                  " continue comments with gq
set formatoptions-=a                  " auto-gq on type in comments?
set formatoptions+=n                  " Recognize numbered lists
set formatoptions+=2                  " Use indent from 2nd line of a paragraph
set formatoptions-=l                  " break lines that are already long?
set formatoptions+=1                  " Break before 1-letter words
" Vim 7.4 only: no // comment when joining commented lines
if v:version >= 704 | set formatoptions+=j | endif

set nrformats-=octal                  " never use octal when <C-x> or <C-a>

" ----------------------------------------------------------------------------
" Whitespace
" ----------------------------------------------------------------------------

set nowrap
set nojoinspaces                      " J command doesn't add extra space

" ----------------------------------------------------------------------------
" Indenting - overridden by indent plugins
" ----------------------------------------------------------------------------

set autoindent                        " indent when creating newline

" for autoindent, use same spaces/tabs mix as previous line, even if
" tabs/spaces are mixed. Helps for docblock, where the block comments have a
" space after the indent to align asterisks
set copyindent

" Try not to change the indent structure on "<<" and ">>" commands. I.e. keep
" block comments aligned with space if there is a space there.
set nopreserveindent

" Smart detect when in braces and parens. Has annoying side effect that it
" won't indent lines beginning with '#'. Relying on syntax indentexpr instead.
set nosmartindent

" Global setting. I don't edit C-style code all the time so don't default to
" C-style indenting.
set nocindent

" ----------------------------------------------------------------------------
" Tabbing - overridden by editorconfig, after/ftplugin
" ----------------------------------------------------------------------------

set expandtab                         " default to spaces instead of tabs
set shiftwidth=2                      " softtabs are 2 spaces for expandtab

" Alignment tabs are two spaces, and never tabs. Negative means use same as
" shiftwidth (so the 2 actually doesn't matter).
set softtabstop=-2

" real tabs render width. Applicable to HTML, PHP, anything using real tabs.
" I.e., not applicable to JS.
set tabstop=2

" use multiple of shiftwidth when shifting indent levels.
" this is OFF so block comments don't get fudged when using ">>" and "<<"
set noshiftround

" When on, a <Tab> in front of a line inserts blanks according to
" 'shiftwidth'. 'tabstop' or 'softtabstop' is used in other places.
set smarttab

set backspace=indent,eol,start        " bs anything

" ----------------------------------------------------------------------------
" Match and search
" ----------------------------------------------------------------------------

set matchtime=1                       " tenths of a sec
set showmatch                         " briefly jump to matching paren?
set hlsearch
set incsearch
set wrapscan                          " Searches wrap around end of the file.
set ignorecase
set smartcase

if executable('rg')
  set grepprg=rg\ --vimgrep
  set grepformat=%f:%l:%c:%m
elseif executable('ag')
  set grepprg=ag\ --vimgrep\ --nocolor
  set grepformat=%f:%l:%c:%m,%f:%l:%m
elseif executable('ack')
  set grepprg=ack\ --nogroup\ --nocolor\ --smart-case\ --column
  set grepformat=%f:%l:%c:%m,%f:%l:%m
endif

" ----------------------------------------------------------------------------
" Special highlights
" ----------------------------------------------------------------------------

" misspellings
match ErrorMsg 'targett'
match ErrorMsg 'plugn'

" Highlight VCS conflict markers
" @see {@link https://bitbucket.org/sjl/dotfiles/src/83aac563abc9d0116894ac61db2c63c9a05f72be/vim/vimrc?at=default&fileviewer=file-view-default#vimrc-233}
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" ----------------------------------------------------------------------------
" Syntax
" Needs to be in vimrc (or ftdetect) since syntax runs before ftplugin
" ----------------------------------------------------------------------------

" ----------------------------------------
" Filetype: markdown
" ----------------------------------------

" Variable to highlight markdown fenced code properly -- uses tpope's
" vim-markdown plugin (which is bundled with vim7.4 now)
" There are more syntaxes, but checking for them makes editing md very slow
let g:markdown_fenced_languages = [
      \ 'html',
      \ 'javascript', 'js=javascript', 'json=javascript',
      \ 'sass',
      \ ]

" ----------------------------------------
" Filetype: python
" ----------------------------------------

" $VIMRUNTIME/syntax/python.vim
let g:python_highlight_all = 1

" ----------------------------------------
" Filetype: sh
" ----------------------------------------

" $VIMRUNTIME/syntax/sh.vim - always assume bash
let g:is_bash = 1

" ----------------------------------------
" Filetype: vim
" ----------------------------------------

" $VIMRUNTIME/syntax/vim.vim
" disable mzscheme, tcl highlighting
let g:vimsyn_embed = 'lpPr'

" ============================================================================
" Multi-file projects
" This has to run super early
" ============================================================================

augroup dkoproject
  autocmd!

  autocmd BufNewFile,BufRead,BufWritePost
        \ *
        \ call dkoproject#GetRoot()
augroup END

" ============================================================================
" Plugins
" ============================================================================

" ----------------------------------------------------------------------------
" Plugins: Disable distributed plugins
" To re-enable you have to comment them out (checks if defined, not if truthy)
" ----------------------------------------------------------------------------

let g:loaded_2html_plugin = 1
let g:loaded_getscriptPlugin = 1
let g:loaded_gzip = 1
let g:loaded_LogiPat = 1
let g:loaded_tarPlugin = 1
let g:loaded_zipPlugin = 1
" used to download spellfile and enable gx mapping
"let g:loaded_netrwPlugin = 0

" ----------------------------------------------------------------------------
" Plugins: netrw
" ----------------------------------------------------------------------------

" netrw in details format when no vimfiler
let g:netrw_liststyle = 3
let g:netrw_home = expand(g:dko#vim_dir . '/.tmp/cache')
let g:netrw_browsex_viewer = has('mac') ? 'open' : 'xdg-open'

" ----------------------------------------------------------------------------
" Plugins: load - called when vim-plug available
" ----------------------------------------------------------------------------

function! PlugIf(condition, ...) abort
  let l:enabled = a:condition ? {} : { 'on': [], 'for': [] }
  return a:0 ? extend(l:enabled, a:000[0]) : l:enabled
endfunction

function! s:LoadPlugins()
  " Notes on adding plugins:
  " - Absolutely do not use 'for' if the plugin provides an `ftdetect/`

  " ========================================================================
  " Plug: Colorscheme
  " ========================================================================

  let l:truecolor = has('nvim') || has('gui_running') || has('termguicolors')
  Plug 'rakr/vim-one', PlugIf(l:truecolor)
  Plug 'arcticicestudio/nord-vim'

  " ==========================================================================
  " Plug: Embedded filetype support
  " ==========================================================================

  " determine inline embedded filetypes
  Plug 'Shougo/context_filetype.vim'

  " ========================================================================
  " Plug: File system, ctags
  " ========================================================================

  " creates dir if new file in new dir
  Plug 'dockyard/vim-easydir'

  " manages tag files
  " Plug 'ludovicchabant/vim-gutentags'

  " ========================================================================
  " Plug: Commands
  " ========================================================================

  " Disabled on regular vim since it needs a terminal
  if has('nvim')
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
    Plug 'junegunn/fzf.vim'
  endif

  " Perform git operations within a Vim session
  Plug 'lambdalisue/gina.vim', { 'on': ['Gina'] }

  " gK to lookup documentation
  Plug 'keith/investigate.vim'

  Plug 'Shougo/unite.vim'
        \| Plug 'Shougo/vimfiler.vim'
        \| Plug 'Shougo/unite-outline'
        \| Plug 'tsukkee/unite-tag'

  " unite most-recently-used files menu
  if executable('redis-server') && executable('npm')
    Plug 'chemzqm/redismru.vim', { 'do': 'npm install' }
  else
    Plug 'Shougo/neomru.vim'
  endif

  " Indent guides
  Plug 'nathanaelkane/vim-indent-guides', {
        \   'on': [
        \     '<Plug>IndentGuidesToggle',
        \     'IndentGuidesToggle',
        \     'IndentGuidesEnable',
        \   ]
        \ }

  " Add file manip commands like Remove, Move, Rename, SudoWrite
  Plug 'tpope/vim-eunuch'

  " Run tests
  Plug 'janko-m/vim-test'

  " ========================================================================
  " Plug: Input, syntax, spacing
  " ========================================================================

  " highlight matching html tag
  Plug 'gregsexton/MatchTag'

  " highlight lines corresponding to quickfix entries
  Plug 'jceb/vim-hier', { 'on': ['HierStart'] }

  " add gS to smart split lines like comma lists and html tags
  Plug 'AndrewRadev/splitjoin.vim'

  Plug 'neomake/neomake'

  " get the name for the function where your cussor is located
  Plug 'tyru/current-func-info.vim'

  " ========================================================================
  " Plug: Completion
  " ========================================================================

  if has('nvim') && has('python3')
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  elseif has('lua')
    Plug 'Shougo/neocomplete.vim'
  endif

  let g:dko_has_completion =
        \ exists("g:plugs['neocomplete.vim']")
        \ || exists("g:plugs['deoplete.nvim']")

  if g:dko_has_completion
    "Full syntax completion - super slow, like syntaxcomplete
    "Plug 'Shougo/neco-syntax', { 'for': ['scss'] }

    " Mixed-filetype completion for Shougo complete, e.g. highlight JS within
    " Markdown fenced code blocks.
    Plug 'Shougo/context_filetype.vim'

    " Include completion
    Plug 'Shougo/neoinclude.vim'

    Plug 'Shougo/neosnippet'
          \| Plug 'honza/vim-snippets'
          \| Plug 'Shougo/neosnippet-snippets'

    if has('python3')
      Plug 'zchee/deoplete-jedi'
    endif
  endif

  " ========================================================================
  " Plug: Editing keys
  " ========================================================================

  " align regions of text that match a pattern , eg: `:Tab /=A`
  Plug 'godlygeek/tabular', { 'on': ['Tabularize'] }

  " custom C-x C-a mappings, see plugin/plug-increment-activator.vim
  Plug 'nishigori/increment-activator'

  " gcc to comment the current line
  Plug 'tomtom/tcomment_vim'

  " easyclip requires repeat, REMAPS all register keys (y,d,s,c,etc.)
  " and use 'm' instead
  Plug 'tpope/vim-repeat'
        \| Plug 'svermeulen/vim-easyclip'

  " used for line bubbling commands on mac
  " buffer switch, lnext/prev, etc.
  Plug 'tpope/vim-unimpaired'

  " REMAPS 's' to surround operator
  Plug 'kana/vim-operator-user'
        \| Plug 'rhysd/vim-operator-surround'
        \| Plug 'tyru/operator-camelize.vim'

  " Sorted by what the textobj provides
  " Tip Use :omap ie to see what the operator-pending is mapped to
  " d/D for underscore section (e.g. `did` on foo_b|ar_baz -> foo__baz)
  " r for right hand of assignment (`baz` in `foo = baz`)
  " k/v for JSON style key/value
  " e for entire file
  " i for indent level
  " l for current line
  " u for url
  " b for any block type (parens, braces, quotes, ltgt)
  " = and i= for conflicts marked blocks
  " x for xml attr like `data-content="everything"`
  " c for css/sass/less block
  " f for function (c, java, js, php, vim only)
  Plug 'kana/vim-textobj-user'
        \| Plug 'machakann/vim-textobj-delimited'
        \| Plug 'Julian/vim-textobj-assignment',
        \   has('python') ? {} : { 'on': [] }
        \| Plug 'vimtaku/vim-textobj-keyvalue'
        \| Plug 'kana/vim-textobj-entire'
        \| Plug 'kana/vim-textobj-indent'
        \| Plug 'kana/vim-textobj-line'
        \| Plug 'mattn/vim-textobj-url'
        \| Plug 'rhysd/vim-textobj-anyblock'
        \| Plug 'rhysd/vim-textobj-conflict'
        \| Plug 'whatyouhide/vim-textobj-xmlattr'
        \| Plug 'glts/vim-textobj-comment', { 'for': [ 'javascript' ] }
        \| Plug 'jasonlong/vim-textobj-css',
        \   { 'for': [ 'css', 'sass', 'scss' ] }
        \| Plug 'kana/vim-textobj-function'
                \| Plug 'thinca/vim-textobj-function-javascript',
                \   { 'for': [ 'javascript' ] }

  " ========================================================================
  " Plug: Language
  " ========================================================================

  " special end syntax for various langs
  Plug 'tpope/vim-endwise'

  " ========================================================================
  " Language: bash/shell/zsh
  " ========================================================================

  " Upstreams
  Plug 'chrisbra/vim-sh-indent'
  Plug 'chrisbra/vim-zsh'

  " ========================================================================
  " Language: Git
  " ========================================================================

  " creates gitconfig, gitcommit, rebase
  " provides :DiffGitCached in gitcommit file type
  " vim 7.4-77 ships with 2013 version, this is newer
  Plug 'tpope/vim-git'

  " show diff in own split when editing a COMMIT_EDITMSG
  Plug 'rhysd/committia.vim'

  " ========================================================================
  " Language: HTML, XML, and generators: mustache, handlebars
  " ========================================================================

  Plug 'othree/html5.vim'
  Plug 'briancollins/vim-jst'

  "Plug 'tpope/vim-haml'

  " Creates html.handlebars and other fts and sets syn
  Plug 'mustache/vim-mustache-handlebars'

  " ========================================================================
  " Language: Java
  " ========================================================================

    Plug 'artur-shaik/vim-javacomplete2'

  " ========================================================================
  " Language: JavaScript and derivatives, JSON
  " ========================================================================

    Plug 'elzr/vim-json'

  " provides coffee ft
  " Plug 'kchmck/vim-coffee-script'

  " TypeScript
  "Plug 'leafgarland/typescript-vim'

  " ----------------------------------------
  " Syntax
  " Configured in plugin/plug-vim-javascript.vim
  " ----------------------------------------

  Plug 'othree/yajs.vim'
      \| Plug 'othree/javascript-libraries-syntax.vim'
  Plug 'mxw/vim-jsx'

  " ----------------------------------------
  " Features
  " ----------------------------------------

  " <leader>pd on function to insert jsdoc above
  Plug 'heavenshell/vim-jsdoc'

  " ----------------------------------------
  " Completion
  " ----------------------------------------

  " Code analysis completion
  if executable('npm')
    " Configured in plugins/completion.vim
    Plug 'ternjs/tern_for_vim', { 'do': 'npm install --global tern' }

    if has('nvim')
      " Configured in plugins/completion.vim
      Plug 'carlitux/deoplete-ternjs', { 'do': 'npm install --global tern' }
    endif

  else
    " Syntax completion when no npm
    Plug '1995eaton/vim-better-javascript-completion'
  endif

  " Parameter completion (in or after ' or "), bound to user complete
  " Plug 'othree/jspc.vim'

  " ========================================================================
  " Language: Latex
  " ========================================================================

  Plug 'lervag/vimtex'

  " ========================================================================
  " Language: Markdown, Pandoc, text
  " ========================================================================

  " Override vim included markdown ft* and syntax
  " The git repo has a newer syntax file than the one that ships with vim
  "Plug 'tpope/vim-markdown'

  " Enable pandoc filetype options and vim operators/fns
  Plug 'vim-pandoc/vim-pandoc'

  " Use pandoc for markdown syntax
  Plug 'vim-pandoc/vim-pandoc-syntax'

  " Distraction-free writing
  Plug 'junegunn/goyo.vim', { 'on': ['Goyo'] }

  " Personal wiki
  Plug 'vimwiki/vimwiki'

  " Check for grammar errors
  Plug 'rhysd/vim-grammarous'

  " Detect frequent word repetition
  Plug 'dbmrq/vim-ditto'

  " ========================================================================
  " Language: Python
  " ========================================================================

  Plug 'kh3phr3n/python-syntax', { 'for': 'python' }
  Plug 'google/yapf', { 'rtp': 'plugins/vim', 'for': 'python' }
  Plug 'fisadev/vim-isort', { 'for': 'python' }
  Plug 'heavenshell/vim-pydocstring', { 'for': 'python' }
  Plug 'raimon49/requirements.txt.vim'
  Plug 'lambdalisue/vim-pyenv', { 'for': 'python' }

  " ========================================================================
  " Language: Ruby, rails
  " ========================================================================

  " highlighting for Gemfile
  "Plug 'tpope/vim-bundler'

  " creates ruby filetype
  Plug 'vim-ruby/vim-ruby'

  " ========================================================================
  " Language: Stylesheets
  " ========================================================================

  " ----------------------------------------
  " Syntax
  " ----------------------------------------

  " creates less filetype
  "Plug 'groenewege/vim-less'

  " runtime css.vim provides @media syntax highlighting where hail2u doesn't
  " JulesWang/css.vim is the active repo for the css.vim bundled with vim
  " hail2u extends vim's css highlighting
  "
  " scss-syntax needs the 'for' since it has an ftdetect that doesn't check
  " if the ft was already set. The result is that without 'for', the filetype
  " will be set twice successively (and any autocommands will run twice),
  " particularly in neovim which comes with tpope's (older) scss rumtimes.
  Plug 'JulesWang/css.vim'
        \| Plug 'hail2u/vim-css3-syntax'
        \| Plug 'wavded/vim-stylus'
        \| Plug 'cakebaker/scss-syntax.vim', { 'for': ['scss'] }
        "\| Plug 'davidosomething/scss-syntax.vim', 

  " ----------------------------------------
  " Features
  " ----------------------------------------

  " Hex (et al) color highlighting
  Plug 'ap/vim-css-color'

  " Omnicompletion
  Plug 'othree/csscomplete.vim'

  " ========================================================================
  " Language: .tmux.conf
  " ========================================================================

  Plug 'tmux-plugins/vim-tmux'

  " ========================================================================
  " Language: VimL
  " ========================================================================

  Plug 'machakann/vim-vimhelplint'

  " gf to go to where autoloaded function is defined
  Plug 'kana/vim-gf-user', { 'for': ['vim'] }
        \| Plug 'sgur/vim-gf-autoload', { 'for': ['vim'] }

  " Auto-prefix continuation lines with \
  Plug 'lambdalisue/vim-backslash'

  " Completion
  if g:dko_has_completion | Plug 'Shougo/neco-vim', { 'for': ['vim'] }
  endif

  " ========================================================================
  " Plug: UI -- load last!
  " ========================================================================

  " :GitGutterToggle (bound to C-g)
  Plug 'airblade/vim-gitgutter', { 'on': ['GitGutterToggle'] }

  " <Plug> to not move on * search function
  Plug 'haya14busa/vim-asterisk'

  " Disabled on neovim until 0.2
  " Will be replaced by https://github.com/neovim/neovim/pull/5226
  " @see https://github.com/haya14busa/incsearch.vim/issues/79
  " @see https://github.com/neovim/neovim/issues/3688
  " highlight partial matches as you type in search mode
  if !has('nvim') | Plug 'haya14busa/incsearch.vim'
  endif

  Plug 'majutsushi/tagbar'

  " show registers in split if use \" or <C-R>
  "Plug 'junegunn/vim-peekaboo'

  " Show (#/total results) when searching for a term
  " known echo issue if remapping [[ and ]], but I removed that map
  " @see https://github.com/osyo-manga/vim-anzu/issues/19
  " Plug 'osyo-manga/vim-anzu'

  Plug 'moll/vim-bbye'

  Plug 'now/vim-quit-if-only-quickfix-buffer-left'

  Plug 'tmux-plugins/vim-tmux-focus-events'
endfunction

" ----------------------------------------------------------------------------
" Plugins: autoinstall vim-plug, define plugins, install plugins if needed
" ----------------------------------------------------------------------------

let s:use_plugins = 1
let s:plug_dir = '/vendor/'
let s:plug_dir .= has('nvim') ? 'nvim' : 'vim'
let s:dko_plug_absdir = g:dko#vim_dir . s:plug_dir

let g:plug_window = 'tabnew'

if s:use_plugins
  " Load vim-plug and its plugins?
  if empty(glob(expand(g:dko#vim_dir . '/autoload/plug.vim')))
    execute 'silent !curl -fLo '
          \ . g:dko#vim_dir . '/autoload/plug.vim '
          \ . 'https://raw.githubusercontent.com/'
          \ . 'junegunn/vim-plug/master/plug.vim'
  endif

  call plug#begin(s:dko_plug_absdir)
    call s:LoadPlugins()
    if !isdirectory(expand(s:dko_plug_absdir)) | PlugInstall
    endif
  call plug#end()
endif

" ============================================================================
" Autocommands
" ============================================================================

" Window aucmds -- affect layout
augroup dkowindow
  autocmd!

  " Resize all windows when the window is resized
  autocmd VimResized
        \ *
        \ wincmd =
augroup END

" Tabline
augroup dkotabline
  autocmd!

  autocmd vimrc VimEnter
        \ *
        \ set tabline=%!dkotabline#Output()

  autocmd BufWinEnter,Colorscheme,CursorMoved,Filetype,SessionLoadPost,WinEnter
        \ *
        \ call dkotabline#Refresh()
augroup END

" Statusline
" Must init statusline after plugs installed since it uses some plugins
" @TODO decouple
augroup dkostatusline
  autocmd!

  autocmd vimrc VimEnter
        \ *
        \ set statusline=%!dkostatus#Output(1)

  " initial statusline in case you type before VimEnter
  autocmd BufWinEnter,Colorscheme,Filetype,SessionLoadPost
        \ *
        \ call dkostatus#Refresh()
augroup END

" ============================================================================
" Local vimrc
" ============================================================================

" Loads vimrc.vim from the ~/.secret/vim runtimepath (and wherever else it
" exists).
" The filename vimrc.vim only exists in ~/.secret/vim AFAIK, but might have to
" change it if I find out otherwise...
set runtimepath+=$HOME/.secret/vim
runtime! vimrc.vim

" ============================================================================
" Security
" ============================================================================

" Disallow unsafe local vimrc commands
" Leave down here since it trims local settings
set secure

