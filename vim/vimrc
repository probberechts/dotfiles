scriptencoding utf-8

"
"   ██╗   ██╗ ██╗ ███╗   ███╗ ██████╗   ██████╗
"   ██║   ██║ ██║ ████╗ ████║ ██╔══██╗ ██╔════╝
"   ██║   ██║ ██║ ██╔████╔██║ ██████╔╝ ██║
"   ╚██╗ ██╔╝ ██║ ██║╚██╔╝██║ ██╔══██╗ ██║
" ██╗╚████╔╝  ██║ ██║ ╚═╝ ██║ ██║  ██║ ╚██████╗
" ╚═╝ ╚═══╝   ╚═╝ ╚═╝     ╚═╝ ╚═╝  ╚═╝  ╚═════╝
"

" ============================================================================
" Settings vars
" ============================================================================

let g:mapleader = "\<Space>"

" Just for debugging
let g:dko_rtp_original = &runtimepath

" flags
let g:dko_is_iterm = $TERM_PROGRAM ==# 'iTerm.app'

" Plugin settings
let g:dko_autoinstall_vim_plug = executable('git')
let g:dko_use_completion = has('nvim-0.3') && executable('node')
let g:dko_use_fzf = v:version >= 704 && exists('&autochdir')

" Used by anything that needs to change/use loc list
let g:dko_loc_list_height = 10

" ============================================================================
" My autocmd block - Clear vimrc group's autocmds if reloading
" ============================================================================

augroup vimrc
  autocmd!
augroup END

" ============================================================================
" My defaults
" May be overridden by **/plugins, after/plugins and **/ftplugins
" ============================================================================

set modeline

" ----------------------------------------------------------------------------
" Clipboard -- use os clipboard
" ----------------------------------------------------------------------------

set pastetoggle=<F12>

if has('clipboard')
  set clipboard=unnamed                 " Use vim global clipboard register
  if has('unnamedplus') || has('nvim')  " Use system clipboard register
    set clipboard+=unnamedplus
  endif
endif


" ----------------------------------------------------------------------------
" Display
" ----------------------------------------------------------------------------

set title                             " wintitle = filename - vim

" this is already set by modern terminal
"set ttyfast

if !has('nvim')
  set lazyredraw                      " macros don't update display
endif

" no beeps or flashes
set novisualbell
set noerrorbells

set number
set numberwidth=5

" show context around current cursor position
set scrolloff=8
set sidescrolloff=16

set textwidth=78
" the line will be right after column 80, &tw+3
set colorcolumn=+3
" set cursorline

set synmaxcol=512                     " don't syntax highlight long lines

if exists('+signcolumn')
  let &signcolumn = has('nvim-0.4') ? 'auto:3' : 'yes'
endif

" ------------------------------------
" Tab line
" ------------------------------------

set showtabline=0                     " start OFF, toggle =2 to show tabline

" ------------------------------------
" Status line
" ------------------------------------

set laststatus=2                      " always show all statuslines

" ------------------------------------
" Command line
" ------------------------------------

set noshowcmd                         " show incomplete commands (SLOW so off)
set noshowmode                        " don't show -- INSERT -- in cmdline

" ----------------------------------------------------------------------------
" Input
" ----------------------------------------------------------------------------

" Enable mouse in all modes
set mouse=a

" Typing key combos
set notimeout
set ttimeout

" ----------------------------------------------------------------------------
" Wild and file globbing stuff in command mode
" ----------------------------------------------------------------------------

set browsedir=buffer                  " browse files in same dir as open file
set wildmode=list:longest,full        " Complete files using a menu AND list
set wildignorecase

" wildignore prevents things from showing up in cmd completion
" It's for things you'd NEVER open in Vim, like caches and binary files
"
" So don't do this! There are cases where you'd edit them or their contents
"set wildignore+=.git
"set wildignore+=.hg,.svn
"set wildignore+=tags
"set wildignore+=*.manifest

" Binary
set wildignore+=*.aux,*.toc
set wildignore+=*.o,*.obj,*.exe,*.dll,*.jar,*.pyc,*.rbc,*.class
set wildignore+=*.ai,*.bmp,*.gif,*.ico,*.jpg,*.jpeg,*.png,*.psd,*.webp
set wildignore+=*.avi,*.m4a,*.mp3,*.oga,*.ogg,*.wav,*.webm
set wildignore+=*.eot,*.otf,*.ttf,*.woff
set wildignore+=*.doc,*.pdf
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
" Cache
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*.gem
set wildignore+=.sass-cache
set wildignore+=npm-debug.log
" Compiled
set wildignore+=*.marko.js
set wildignore+=*.min.*,*-min.*
" Temp/System
set wildignore+=*.*~,*~
set wildignore+=*.swp,.lock,.DS_Store,._*,tags.lock

" ----------------------------------------------------------------------------
" File saving
" ----------------------------------------------------------------------------

set fileformats=unix,mac,dos
" Not modifiable if no window (e.g. resourcing vimrc)
if !&modifiable | set fileformat=unix | endif

" If we have a swap conflict, FZF has issues opening the file (and doesn't
" prompt correctly)
set noswapfile

" Use backup files when writing (create new file, replace old one with new
" one)
" Disabled for coc.nvim compat
set nowritebackup
" but do not leave around backup.xyz~ files after that
set nobackup
" backupcopy=yes is the default, just be explicit. We need this for
" webpack-dev-server and hot module reloading -- preserves special file types
" like symlinks
set backupcopy=yes

" don't create backups for these paths
set backupskip+=/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*
" Make Vim able to edit crontab files again.
set backupskip+=/private/tmp/*"
set backupskip+=~/.secret/*

" undo files
" double slash means create dir structure to mirror file's path
set undofile
set undolevels=1000
set undoreload=10000

" ----------------------------------------------------------------------------
" Spellcheck
" ----------------------------------------------------------------------------

" Add symlinked aspell from dotfiles as default spellfile
"execute 'set spellfile=' . glob(expand(dko#vim_dir . '/en.utf-8.add'))

" ----------------------------------------------------------------------------
" Built-in completion
" ----------------------------------------------------------------------------

" Don't consider = symbol as part filename. Helps for deoplete file source, too.
set isfname-==

set complete-=t                       " don't complete tags
set completeopt-=longest              " ncm2 requirement
set completeopt-=preview              " don't open scratch preview
set completeopt+=noinsert             " ncm2 requirement
set completeopt+=noselect             " ncm2 don't select first thing
set completeopt+=menu,menuone         " show PUM, even for one thing

" ----------------------------------------------------------------------------
" Message output on vim actions
" ----------------------------------------------------------------------------

" Some of these are the defaults, but explicitly match vim and nvim-4.0
set shortmess+=ilmnrxoOtWI
" Disable "Pattern not found" messages
if has('patch-7.4.314') | set shortmess+=c | endif

" ----------------------------------------------------------------------------
" Window splitting and buffers
" ----------------------------------------------------------------------------

set splitbelow
set splitright
if exists('+splitkeep')
  set splitkeep=screen
endif

set hidden                            " remember undo after quitting

" reveal already opened files from the quickfix window instead of opening new
" buffers
set switchbuf=useopen

set nostartofline                     " don't jump to col1 on switch buffer

" ----------------------------------------------------------------------------
" Code folding
" ----------------------------------------------------------------------------
"
set foldlevel=999                     " very high === all folds open
set foldlevelstart=99                 " show all folds by default
set nofoldenable

" ----------------------------------------------------------------------------
" Trailing whitespace
" ----------------------------------------------------------------------------

set list
set listchars=
set listchars+=tab:→\ 
set listchars+=trail:·
set listchars+=extends:»              " show cut off when nowrap
set listchars+=precedes:«
set listchars+=nbsp:⣿

" maybe...
" if has('patch-7.4.785') | set fixendofline | endif

" ----------------------------------------------------------------------------
" Diffing
" ----------------------------------------------------------------------------

" Note this is += since fillchars was defined in the window config
set fillchars+=diff:⣿
set diffopt=vertical                  " Use in vertical diff mode
set diffopt+=filler                   " blank lines to keep sides aligned
set diffopt+=iwhite                   " Ignore whitespace changes

" ----------------------------------------------------------------------------
" Input auto-formatting (global defaults)
" Probably need to update these in after/ftplugin too since ftplugins will
" probably update it.
" ----------------------------------------------------------------------------

set formatoptions=
set formatoptions+=c                  " Auto-wrap comments using textwidth
set formatoptions+=r                  " Continue comments by default
set formatoptions-=o                  " do not continue comment using o or O
set formatoptions+=q                  " continue comments with gq
set formatoptions-=a                  " auto-gq on type in comments?
set formatoptions+=n                  " Recognize numbered lists
set formatoptions+=2                  " Use indent from 2nd line of a paragraph
set formatoptions-=l                  " break lines that are already long?
set formatoptions+=1                  " Break before 1-letter words
" Vim 7.4 only: no // comment when joining commented lines
if v:version >= 704 | set formatoptions+=j | endif

" ----------------------------------------------------------------------------
" Whitespace
" ----------------------------------------------------------------------------

set nowrap
set nojoinspaces                      " J command doesn't add extra space

" ----------------------------------------------------------------------------
" Indenting - overridden by indent plugins
" ----------------------------------------------------------------------------

" For autoindent, use same spaces/tabs mix as previous line, even if
" tabs/spaces are mixed. Helps for docblock, where the block comments have a
" space after the indent to align asterisks
"
" The test case what happens when using o/O and >> and << on these:
"
"     /**
"      *
"
" Refer also to formatoptions+=o (copy comment indent to newline)
set nocopyindent

" Try not to change the indent structure on "<<" and ">>" commands. I.e. keep
" block comments aligned with space if there is a space there.
set nopreserveindent

" Smart detect when in braces and parens. Has annoying side effect that it
" won't indent lines beginning with '#'. Relying on syntax indentexpr instead.
" 'smartindent' in general is a piece of garbage, never turn it on.
set nosmartindent

" Global setting. I don't edit C-style code all the time so don't default to
" C-style indenting.
set nocindent

" ----------------------------------------------------------------------------
" Tabbing - overridden by editorconfig, after/ftplugin
" ----------------------------------------------------------------------------

set expandtab                         " default to spaces instead of tabs
set shiftwidth=2                      " softtabs are 2 spaces for expandtab

" Alignment tabs are two spaces, and never tabs. Negative means use same as
" shiftwidth (so the 2 actually doesn't matter).
set softtabstop=-2

" real tabs render width. Applicable to HTML, PHP, anything using real tabs.
" I.e., not applicable to JS.
set tabstop=2

" use multiple of shiftwidth when shifting indent levels.
" this is OFF so block comments don't get fudged when using ">>" and "<<"
set noshiftround

" When on, a <Tab> in front of a line inserts blanks according to
" 'shiftwidth'. 'tabstop' or 'softtabstop' is used in other places.
set smarttab

set backspace=indent,eol,start        " bs anything

" ----------------------------------------------------------------------------
" Match and search
" ----------------------------------------------------------------------------

set matchtime=1                       " tenths of a sec
set showmatch                         " briefly jump to matching paren?
set hlsearch
set incsearch
set wrapscan                          " Searches wrap around end of the file.
set ignorecase
" Follow smartcase and ignorecase when doing tag search
if exists('+tagcase') && has('patch-7.4.2230') | set tagcase=followscs | endif
set smartcase

if !empty(dkogrepper#Get().command)
  let &g:grepprg = dkogrepper#Get().command . ' '
        \ . join(dkogrepper#Get().options, ' ')
  let &g:grepformat = dkogrepper#Get().format
endif

" ----------------------------------------------------------------------------
" Syntax
" Needs to be in vimrc (or ftdetect) since syntax runs before ftplugin
" ----------------------------------------------------------------------------

" ----------------------------------------
" Filetype: markdown
" ----------------------------------------

" Variable to highlight markdown fenced code properly -- uses tpope's
" vim-markdown plugin (which is bundled with vim7.4 now)
" There are more syntaxes, but checking for them makes editing md very slow
let g:markdown_fenced_languages = [
      \   'python',
      \   'json',
      \   'bash=sh', 'sh',
      \   'help',
      \ ]

" ----------------------------------------
" Filetype: python
" ----------------------------------------

" $VIMRUNTIME/syntax/python.vim
let g:python_highlight_all = 1

" ----------------------------------------
" Filetype: sh
" ----------------------------------------

" $VIMRUNTIME/syntax/sh.vim - always assume bash
let g:is_bash = 1

" ----------------------------------------
" Filetype: vim
" ----------------------------------------

" $VIMRUNTIME/syntax/vim.vim
" disable mzscheme, tcl highlighting
let g:vimsyn_embed = 'lpPr'

" ============================================================================
" Multi-file projects
" This has to run super early
" ============================================================================

augroup dkoproject
  autocmd!

  autocmd BufNewFile,BufRead,BufWritePost
        \ *
        \ call dkoproject#GetRoot()
augroup END

" ============================================================================
" Plugins
" ============================================================================

" ----------------------------------------------------------------------------
" Plugins: Disable distributed plugins
" To re-enable you have to comment them out (checks if defined, not if truthy)
" ----------------------------------------------------------------------------

let g:loaded_2html_plugin = 1
let g:loaded_getscriptPlugin = 1
let g:loaded_gzip = 1
let g:loaded_man = 1
let g:loaded_LogiPat = 1
let g:loaded_tarPlugin = 1
let g:loaded_tutor_mode_plugin = 1
let g:loaded_zipPlugin = 1

" % matching replaced by vim-matchup, which sets the following
"let g:loaded_matchit = 1
" Upstream matchparen -- it is inaccurate. Replaced by vim-matchup
let g:loaded_matchparen = 1

" used to download spellfile and enable gx mapping
"let g:loaded_netrwPlugin = 0

" ----------------------------------------------------------------------------
" Plugins: netrw
" ----------------------------------------------------------------------------

" netrw in details format when no vimfiler
let g:netrw_liststyle = 3
let g:netrw_home = expand(g:dko#vim_dir . '/.tmp/cache')
let g:netrw_browsex_viewer = has('mac') ? 'open' : 'xdg-open'

" ----------------------------------------------------------------------------
" Plugins: load - called when vim-plug available
" ----------------------------------------------------------------------------

" Similar but safer than Cond() from
" <https://github.com/junegunn/vim-plug/wiki/faq>
" This is a global function for command access
function! PlugIf(condition, ...) abort
  let l:enabled = a:condition ? {} : { 'on': [], 'for': [] }
  return a:0 ? extend(l:enabled, a:000[0]) : l:enabled
endfunction

" Shortcut
function! WithCompl(...) abort
  return call('PlugIf', [ g:dko_use_completion ] + a:000)
endfunction

function! s:LoadPlugins()
  " Notes on adding plugins:
  " - Absolutely do not use 'for' if the plugin provides an `ftdetect/`

  " ==========================================================================
  " Vim debugging
  " ==========================================================================

  " Show slow plugins
  Plug 'tweekmonster/startuptime.vim', { 'on': [ 'StartupTime' ] }

  " ========================================================================
  " Plug: Colorscheme
  " ========================================================================

  let l:truecolor = has('nvim') || has('gui_running') || has('termguicolors')
  Plug 'rakr/vim-one', PlugIf(l:truecolor)
  Plug 'arcticicestudio/nord-vim'

  " ==========================================================================
  " Plug: Embedded filetype support
  " ==========================================================================

  " determine inline embedded filetypes
  Plug 'Shougo/context_filetype.vim', { 'commit': '2876816' }

  " ========================================================================
  " Plug: Commands
  " ========================================================================

  Plug 'Shougo/unite.vim'
      \| Plug 'Shougo/vimfiler.vim'
      \| Plug 'Shougo/unite-outline'
      \| Plug 'tsukkee/unite-tag'

  " --------------------------------------------------------------------------
  " FZF
  " --------------------------------------------------------------------------

  " Use the repo instead of the version in brew since it includes the help
  " docs for fzf#run()
  Plug 'junegunn/fzf', PlugIf(g:dko_use_fzf)

  let g:fzf_command_prefix = 'FZF'
  let g:fzf_layout = extend({ 'down': '~40%' }, {})
  let g:fzf_buffers_jump = 1
  Plug 'junegunn/fzf.vim', PlugIf(g:dko_use_fzf)

  " --------------------------------------------------------------------------
  " NeoMake
  " --------------------------------------------------------------------------

  let g:neoformat_enabled_json = [ 'dkoprettier', 'jq' ]
  let g:neoformat_enabled_java = [ 'uncrustify' ]
  let g:neoformat_enabled_javascript = [ 'eslint_d', 'standard' ]
  let g:neoformat_enabled_less = [ 'dkoprettier' ]
  let g:neoformat_enabled_lua = [ 'luafmt', 'luaformatter', 'stylua' ]
  let g:neoformat_enabled_markdown = []
  let g:neoformat_enabled_python = [ 'black', 'isort' ]
  let g:neoformat_enabled_scss = [ 'dkoprettier' ]
  Plug 'sbdchd/neoformat'
  augroup dkoneoformat
    autocmd! FileType
        \ javascript,javascriptreact,typescript,typescriptreact
        \ nmap <silent> <A-e> :<C-u>Neoformat eslint_d<CR>
    autocmd BufWritePre *.ts* Neoformat eslint_d
  augroup END

  " Add file manip commands like Remove, Move, Rename, SudoWrite
  Plug 'tpope/vim-eunuch'

  " Run tests
  Plug 'benmills/vimux'
  Plug 'janko-m/vim-test'

  " ========================================================================
  " Plug: Input, syntax, spacing
  " ========================================================================

  " highlight matching html/xml tag
  "Plug 'gregsexton/MatchTag'
  let g:matchup_delim_noskips = 2
  let g:matchup_matchparen_deferred = 1
  let g:matchup_matchparen_status_offscreen = 0
  Plug 'andymass/vim-matchup', PlugIf(has('patch-7.4.1689'))

  " add gS on char to smart split lines at char, like comma lists and html tags
  let g:splitjoin_trailing_comma = 0
  let g:splitjoin_ruby_trailing_comma = 1
  let g:splitjoin_ruby_hanging_args = 1
  Plug 'AndrewRadev/splitjoin.vim'

  Plug 'neomake/neomake', PlugIf(has('patch-7.4.503'))

  " ========================================================================
  " Plug: Editing keys
  " ========================================================================

  " align regions of text that match a pattern , eg: `:Tab /=A`
  Plug 'godlygeek/tabular', { 'on': ['Tabularize'] }

  " custom C-x C-a mappings, see plugin/plug-increment-activator.vim
  Plug 'nishigori/increment-activator'

  " used for line bubbling commands on mac
  " buffer switch, lnext/prev, etc.
  Plug 'tpope/vim-unimpaired'

  " easyclip requires repeat, REMAPS all register keys (y,d,s,c,etc.)
  " and use 'm' instead
  Plug 'tpope/vim-repeat'
        \| Plug 'svermeulen/vim-easyclip'

  " --------------------------------------------------------------------------
  " Operators and Textobjs
  " --------------------------------------------------------------------------

  " gcc to comment the current line
  Plug 'tyru/caw.vim', { 'on': [ '<Plug>(caw' ] }

  " REMAPS 's' to surround operator
  Plug 'kana/vim-operator-user'
  Plug 'rhysd/vim-operator-surround'
  " <Leader>c to toggle PascalCase/snak_e the pending operator
  Plug 'tyru/operator-camelize.vim', { 'on': [ '<Plug>(operator-camelize' ] }

  " Some textobjs are lazy loaded since they are ~4ms slow to load.
  " -       Base textobj plugin
  Plug 'kana/vim-textobj-user'
  " - i     for indent level
  Plug 'kana/vim-textobj-indent', { 'on': [ '<Plug>(textobj-indent' ] }
  " - P     for last paste
  Plug 'gilligan/textobj-lastpaste', { 'on': [ '<Plug>(textobj-lastpaste' ] }
  " - u     for url
  Plug 'mattn/vim-textobj-url', { 'on': [ '<Plug>(textobj-url' ] }
  " - b     for any block type (parens, braces, quotes, ltgt)
  Plug 'rhysd/vim-textobj-anyblock'

  " ========================================================================
  " Plug: Completion
  " ========================================================================

  Plug 'github/copilot.vim'

  " --------------------------------------------------------------------------
  " Signature preview
  " --------------------------------------------------------------------------

  Plug 'Shougo/echodoc.vim'

  " --------------------------------------------------------------------------
  " Snippet engine
  " Now using coc-snippets
  " --------------------------------------------------------------------------

  " Provides some ultisnips snippets for use with neosnippet or coc-snippets
  Plug 'honza/vim-snippets', WithCompl()

  " --------------------------------------------------------------------------
  " Completion engine
  " --------------------------------------------------------------------------

  " https://github.com/neoclide/coc.nvim/wiki/Using-coc-extensions
  let g:coc_global_extensions = [
        \  'coc-calc',
        \  'coc-css',
        \  'coc-cssmodules',
        \  'coc-diagnostic',
        \  'coc-docthis',
        \  'coc-eslint',
        \  'coc-git',
        \  'coc-html',
        \  'coc-json',
        \  'coc-markdownlint',
        \  'coc-prettier',
        \  'coc-pyright',
        \  'coc-sh',
        \  'coc-snippets',
        \  'coc-yaml',
        \]
  " Not working
  "      \  'coc-python',
  "      \  'coc-java',
  " Doesn't redraw in sync with edits
  "\  'coc-highlight',
  Plug 'neoclide/coc.nvim', WithCompl({ 'branch': 'release' })

  " ========================================================================
  " Plug: Language
  " ========================================================================

  " special end syntax for various langs
  Plug 'tpope/vim-endwise'

  " sets the value of ‘commentstring’ to a different value depending on the
  " region of the file you are in.
  Plug 'suy/vim-context-commentstring'

  " ==========================================================================
  " Language: ansible config
  " ==========================================================================

  Plug 'pearofducks/ansible-vim'

  " ========================================================================
  " Language: bash/shell/zsh
  " ========================================================================

  " Upstreams
  Plug 'chrisbra/vim-sh-indent'
  Plug 'chrisbra/vim-zsh'

  " ========================================================================
  " Language: Git
  " ========================================================================

  " creates gitconfig, gitcommit, rebase
  " provides :DiffGitCached in gitcommit file type
  " vim 7.4-77 ships with 2013 version, this is newer
  Plug 'tpope/vim-git'

  " show diff in own split when editing a COMMIT_EDITMSG
  let g:committia_open_only_vim_starting = 0
  let g:committia_use_singlecolumn       = 'always'
  Plug 'rhysd/committia.vim'

  " ========================================================================
  " Language: HTML, XML, and generators: mustache, handlebars
  " ========================================================================

  Plug 'othree/html5.vim'

  " ========================================================================
  " Language: JavaScript and derivatives, JSON
  " ========================================================================

  Plug 'elzr/vim-json'
  Plug 'maksimr/vim-jsbeautify'

  " provides coffee ft
  " Plug 'kchmck/vim-coffee-script'

  " TypeScript
  " Plug 'leafgarland/typescript-vim'

  " ----------------------------------------
  " Syntax
  " Configured in plugin/plug-vim-javascript.vim
  " ----------------------------------------

  Plug 'othree/yajs.vim'
      \| Plug 'othree/javascript-libraries-syntax.vim'
  Plug 'mxw/vim-jsx'

  " ----------------------------------------
  " Features
  " ----------------------------------------

  " <leader>pd on function to insert jsdoc above
  Plug 'heavenshell/vim-jsdoc'

  " ========================================================================
  " Language: Latex
  " ========================================================================

  Plug 'lervag/vimtex', { 'for': 'tex' }

  " ========================================================================
  " Language: Markdown, Pandoc, text
  " ========================================================================

  " Override vim included markdown ft* and syntax
  " The git repo has a newer syntax file than the one that ships with vim
  " I'm using jumpy.vim for [[ and ]]
  let g:no_markdown_maps = 1
  Plug 'tpope/vim-markdown'

  " after/syntax for GitHub emoji, checkboxes
  Plug 'rhysd/vim-gfm-syntax'

  " Live preview
  Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && npx --yes yarn install' }

  " Enable pandoc filetype options and vim operators/fns
  Plug 'vim-pandoc/vim-pandoc', PlugIf(v:version >= 704)

  " Use pandoc for markdown syntax
  " Plug 'vim-pandoc/vim-pandoc-syntax'

  " Distraction-free writing
  Plug 'junegunn/goyo.vim', { 'on': ['Goyo'] }

  " Check for grammar errors
  Plug 'rhysd/vim-grammarous'

  " Detect frequent word repetition
  Plug 'dbmrq/vim-ditto'

  " ========================================================================
  " Language: Python
  " ========================================================================

  Plug 'vim-python/python-syntax'
  Plug 'heavenshell/vim-pydocstring', { 'for': 'python' }
  Plug 'raimon49/requirements.txt.vim'
  Plug 'lambdalisue/vim-pyenv', { 'for': 'python' }

  " ========================================================================
  " Language: Ruby, rails
  " ========================================================================

  " highlighting for Gemfile
  "Plug 'tpope/vim-bundler'

  " creates ruby filetype
  Plug 'vim-ruby/vim-ruby'

  " ========================================================================
  " Language: Stylesheets
  " ========================================================================

  " ----------------------------------------
  " Syntax
  " ----------------------------------------

  " creates less filetype
  "Plug 'groenewege/vim-less'

  " runtime css.vim provides @media syntax highlighting where hail2u doesn't
  " JulesWang/css.vim is the active repo for the css.vim bundled with vim
  " hail2u extends vim's css highlighting
  "
  " scss-syntax needs the 'for' since it has an ftdetect that doesn't check
  " if the ft was already set. The result is that without 'for', the filetype
  " will be set twice successively (and any autocommands will run twice),
  " particularly in neovim which comes with tpope's (older) scss rumtimes.
  Plug 'JulesWang/css.vim'
        \| Plug 'hail2u/vim-css3-syntax'
        \| Plug 'wavded/vim-stylus'
        \| Plug 'cakebaker/scss-syntax.vim', { 'for': ['scss'] }
        "\| Plug 'davidosomething/scss-syntax.vim', 

  " ----------------------------------------
  " Features
  " ----------------------------------------

  " Hex (et al) color highlighting
  Plug 'ap/vim-css-color'

  " Omnicompletion
  Plug 'othree/csscomplete.vim'

  " ==========================================================================
  " Language: TOML
  " ==========================================================================

  Plug 'cespare/vim-toml'

  " ========================================================================
  " Language: .tmux.conf
  " ========================================================================

  Plug 'tmux-plugins/vim-tmux'

  " ========================================================================
  " Language: VimL
  " ========================================================================

  Plug 'machakann/vim-vimhelplint'

  " gf to go to where autoloaded function is defined
  Plug 'kana/vim-gf-user', { 'for': ['vim'] }
        \| Plug 'sgur/vim-gf-autoload', { 'for': ['vim'] }

  " Auto-prefix continuation lines with \
  Plug 'lambdalisue/vim-backslash'

  " ========================================================================
  " Plug: UI -- load last!
  " ========================================================================
 
  Plug 'nathanaelkane/vim-indent-guides'
  Plug 'majutsushi/tagbar'

  " --------------------------------------------------------------------------
  " Quickfix window
  " --------------------------------------------------------------------------

  let g:qf_resize_min_height = 4
  Plug 'blueyed/vim-qf_resize'

  " --------------------------------------------------------------------------
  " Window events
  " --------------------------------------------------------------------------

  " <C-w>o to zoom in/out of a window
  "Plug 'dhruvasagar/vim-zoom'
  " Better zoom plugin, accounts for command window and doesn't use sessions
  Plug 'troydm/zoomwintab.vim'

  Plug 'wellle/visual-split.vim', { 'on': [
        \   'VSResize', 'VSSplit',
        \   'VSSplitAbove', 'VSSplitBelow',
        \   '<Plug>(Visual-Split',
        \ ] }

endfunction

" ----------------------------------------------------------------------------
" Plugins: autoinstall vim-plug, define plugins, install plugins if needed
" ----------------------------------------------------------------------------

if g:dko_autoinstall_vim_plug
  let s:has_plug = !empty(glob(expand(g:dko#vim_dir . '/autoload/plug.vim')))
  " Load vim-plug and its plugins?
  if !s:has_plug && executable('curl')
    call dkoplug#install#Install()
    let s:has_plug = 1
  endif

  if s:has_plug
    augroup dkoplugupdates
      autocmd User dko-plugins-installed,dko-plugins-updated
            \   if exists(':UpdateRemotePlugins')
            \|    silent! UpdateRemotePlugins
            \|  endif
    augroup END

    command! PI PlugInstall | doautocmd User dko-plugins-installed
    command! PU PlugUpgrade | PlugUpdate | doautocmd User dko-plugins-updated

    let g:plug_window = 'tabnew'
    call plug#begin(g:dko#plug_absdir)
    if empty($VIMNOPLUGS) | call s:LoadPlugins() | endif
    call plug#end()
  endif
endif

" ============================================================================
" Autocommands
" ============================================================================

augroup dkowindow
   autocmd!
   autocmd VimResized * wincmd =

   " automatically close corresponding loclist when quitting a window
   if exists('##QuitPre')
     autocmd QuitPre * nested if &filetype != 'qf' | silent! lclose | endif
   endif
augroup END

augroup dkolines
  autocmd!
  if dkoplug#IsLoaded('coc.nvim')
    autocmd User CocNvimInit ++nested call dkoline#Init()
  elseif has('nvim')
    autocmd VimEnter * ++nested call dkoline#Init()
  else
    autocmd VimEnter * nested call dkoline#Init()
  endif
augroup END

" Statusline
" Must init statusline after plugs installed since it uses some plugins
" @TODO decouple
augroup dkostatusline
  autocmd!

  autocmd vimrc VimEnter
        \ *
        \ set statusline=%!dkostatus#Output(1)

  " initial statusline in case you type before VimEnter
  autocmd BufWinEnter,Colorscheme,Filetype,SessionLoadPost
        \ *
        \ call dkostatus#Refresh()
augroup END

augroup dkoproject
  autocmd!
  autocmd BufNewFile,BufRead,BufWritePost * call dkoproject#MarkBuffer()
  autocmd User CocNvimInit call dkolint#SetupCoc()
  autocmd User neomake call dkolint#Setup()
augroup END

" Read only mode (un)mappings
augroup dkoreadonly
  autocmd!
  autocmd BufEnter * call dkoreadonly#Unmap()
augroup END

" Disable linting and syntax highlighting for large and minified files
augroup dkohugefile
  autocmd BufReadPre *
        \   if getfsize(expand("%")) > 10000000
        \|    syntax off
        \|    let b:dko_hugefile = 1
        \|  endif
  autocmd BufReadPre *.min.* syntax off
augroup END

" Automatically assign file marks for filetype when switch buffer so you can
" easily go between e.g., css/html using `C `H
" https://old.reddit.com/r/vim/comments/df4jac/how_do_you_use_marks/f317a1l/
augroup dkoautomark
  autocmd!
  autocmd BufLeave *.css,*.less,*.scss  normal! mC
  autocmd BufLeave *.html               normal! mH
  autocmd BufLeave *.js*,*.ts*          normal! mJ
  autocmd BufLeave *.md                 normal! mM
  autocmd BufLeave *.yml,*.yaml         normal! mY
augroup END

augroup dkorestoreposition
  autocmd!
  autocmd BufWinEnter * call dko#RestorePosition()
augroup END

" ============================================================================
" Local vimrc
" ============================================================================

" Loads vimrc.vim from the ~/.secret/vim runtimepath (and wherever else it
" exists).
" The filename vimrc.vim only exists in ~/.secret/vim AFAIK, but might have to
" change it if I find out otherwise...
set runtimepath+=$HOME/.secret/vim
runtime! vimrc.vim

" ============================================================================
" Security
" ============================================================================

" Disallow unsafe local vimrc commands
" Leave down here since it trims local settings
set secure

